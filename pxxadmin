#!/bin/env python2
# coding=utf-8

import sys
import argparse
import ConfigParser
from Crypto.Cipher import AES
from binascii import b2a_hex, a2b_hex

# 加密解密代码来自 https://www.cnblogs.com/kaituorensheng/p/4501128.html


class prpcrypt(object):
    def __init__(self, key):
        self.key = key
        self.mode = AES.MODE_CBC

    # 加密函数，如果text不是16的倍数【加密文本text必须为16的倍数！】，那就补足为16的倍数
    def encrypt(self, text):
        cryptor = AES.new(self.key, self.mode, self.key)
        # 这里密钥key 长度必须为16（AES-128）、24（AES-192）、或32（AES-256）Bytes 长度.目前AES-128足够用
        length = 16
        count = len(text)
        add = length - (count % length)
        text = text + ('\0' * add)
        self.ciphertext = cryptor.encrypt(text)
        # 因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题
        # 所以这里统一把加密后的字符串转化为16进制字符串
        return b2a_hex(self.ciphertext)

    # 解密后，去掉补足的空格用strip() 去掉
    def decrypt(self, text):
        cryptor = AES.new(self.key, self.mode, self.key)
        plain_text = cryptor.decrypt(a2b_hex(text))
        return plain_text.rstrip('\0')


if __name__ == '__main__':
    pc = prpcrypt('pxxtntpxxtntpxxt')  # 初始化密钥
    # e = pc.encrypt("00000")
    # d = pc.decrypt(e)
    # print e, d
    # e = pc.encrypt("00000000000000000000000000")
    # d = pc.decrypt(e)
    # print e, d

    # 解析命令行参数
    parser = argparse.ArgumentParser(description='Admin the pxx database.')
    group = parser.add_argument_group()
    group.add_argument("-u", "--username", help='The username')
    group.add_argument("-p", "--password", help='The password')
    args = parser.parse_args()
    #print args.username, args.password

    cf = ConfigParser.ConfigParser()
    cf.read('pxx.conf')
    if args.username not in cf.options('up'):
        print 'The user is not exist.'
        sys.exit(1)

    unde_password = cf.get('up', args.username)
    passwd = pc.decrypt(unde_password)
    if args.password != passwd:
        print 'The password you input is not right.'
        sys.exit(2)

    input_passwd = raw_input('new password:')
    confirm_passwd = raw_input('confirm:')
    if input_passwd != confirm_passwd:
        print 'confirm password is not right.'
        sys.exit(3)

    new_passwd = pc.encrypt(confirm_passwd)
    cf.set('up', option=args.username, value=new_passwd)
    with open("pxx.conf", "w+") as f:
        cf.write(f)

    print 'The password of', args.username, 'is modified.'
